#
# GRAKN.AI - THE KNOWLEDGE GRAPH
# Copyright (C) 2018 Grakn Labs Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

load("@org_pubref_rules_proto//node:library.bzl", "node_grpc_library")
load("@org_pubref_rules_node//node:rules.bzl", "node_module", "node_binary", "node_test")


sh_binary(
    name = "generate_protos",
    srcs = ["generate_protos.sh"]
)

sh_binary(
    name = "generate_js",
    srcs = ["generate_js.sh"]
)


genrule(
    name = "keyspace_proto_gen",
    srcs = [
        "//protocol/keyspace:Keyspace.proto"
    ],
    cmd = "$(location :generate_protos) $< $@",
    outs = [
        "Keyspace.proto",
    ],
    tools = [":generate_protos"]
)

genrule(
    name = "concept_proto_gen",
    srcs = [
        "//protocol/session:Concept.proto"
    ],
    cmd = "$(location :generate_protos) $< $@",
    outs = [
        "Concept.proto",
    ],
    tools = [":generate_protos"]
)

genrule(
    name = "answer_proto_gen",
    srcs = [
        "//protocol/session:Answer.proto"
    ],
    cmd = "$(location :generate_protos) $< $@",
    outs = [
        "Answer.proto",
    ],
    tools = [":generate_protos"]
)

genrule(
    name = "session_proto_gen",
    srcs = [
        "//protocol/session:Session.proto"
    ],
    cmd = "$(location :generate_protos) $< $@",
    outs = [
        "Session.proto",
    ],
    tools = [":generate_protos"]
)

proto_library(
    name = "generated_protos",
    srcs = [
        ":keyspace_proto_gen",
        ":concept_proto_gen",
        ":answer_proto_gen",
        ":session_proto_gen",
    ]
)

node_grpc_library(
    name = "generated_node_lib",
    deps = [
        ":generated_protos"
    ],
    strip_prefix = "client-nodejs",
)


genrule(
    name = "generated_node_lib_transformed",
    srcs = [":generated_node_lib"],
    cmd = "$(location :generate_js) $(SRCS) --outs $(OUTS)",
    outs = [
        "src/service/Session/autogenerated/Session_pb.js",
        "src/service/Session/autogenerated/Session_grpc_pb.js",
        "src/service/Session/autogenerated/Answer_pb.js",
        "src/service/Session/autogenerated/Answer_grpc_pb.js",
        "src/service/Session/autogenerated/Concept_pb.js",
        "src/service/Session/autogenerated/Concept_grpc_pb.js",
        "src/service/Keyspace/autogenerated/Keyspace_pb.js",
        "src/service/Keyspace/autogenerated/Keyspace_grpc_pb.js",
    ],
    tools = [":generate_js"]
)


node_module(
    name="grakn",
    srcs = glob([
            "src/*.js",
            "src/service/Keyspace/KeyspaceService.js",
            "src/service/Session/*.js",
            "src/service/Session/util/*.js",
            "src/service/Session/concept/*.js",
        ]) + glob([
            "tests/support/GraknTestEnvironment.js",
            "tests/service/keyspace/*.test.js",
            "tests/service/session/transaction/*.test.js",
        ]) + [":generated_node_lib_transformed"] ,
    deps = ["@grpc_node_modules//:_all_"]
)


node_binary(
    name = "grakn_dummy_binary",
    deps = [":grakn"],
    main = "src/Grakn.js"
)


sh_test(
    name = "jest_tests",
    srcs = ["run_jest_tests.sh"],
    data = [":grakn_dummy_binary_deploy.tar.gz"]
)
